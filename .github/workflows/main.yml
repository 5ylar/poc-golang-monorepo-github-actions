name: MonoRepo

on:
  push:
    branches:
      - service/user
      - service/foo
      - dev-service/user
      - dev-service/foo
  pull_request:
    branches:
      - service/user
      - dev-service/user
      - dev-service/foo

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Set environment variables
  #       uses: allenevans/set-env@v2.0.0
  #       with:
  #         SERVICE_NAME: "user"
  #         DEPLOY_ENV: "development"

  #     - name: Import Secrets
  #       id: secrets
  #       uses: hashicorp/vault-action@v2.1.2
  #       with:
  #         url: https://vault.api-fillgoods.com
  #         method: token
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         secrets: |
  #           /poc/github-actions/${{ env.DEPLOY_ENV }} GCP_PROJECT_ID | GCP_PROJECT_ID;
  #           /poc/github-actions/${{ env.DEPLOY_ENV }} GCP_SA_EMAIL | GCP_SA_EMAIL;
  #           /poc/github-actions/${{ env.DEPLOY_ENV }} GCP_SA_KEY | GCP_SA_KEY;
  #           /poc/github-actions/${{ env.DEPLOY_ENV }} GKE_CLUSTER | GKE_CLUSTER;
  #           /poc/github-actions/${{ env.DEPLOY_ENV }} GKE_ZONE | GKE_ZONE;

      # - name: Set environment variables
      #   uses: allenevans/set-env@v2.0.0
      #   with:
      #     GCP_PROJECT_ID: ${{ steps.secrets.outputs.GCP_PROJECT_ID }}
      #     GCP_SA_EMAIL: ${{ steps.secrets.outputs.GCP_SA_EMAIL }}
      #     GCP_SA_KEY: ${{ steps.secrets.outputs.GCP_SA_KEY }}
      #     GKE_CLUSTER: ${{ steps.secrets.outputs.GKE_CLUSTER }}
      #     GKE_ZONE: ${{ steps.secrets.outputs.GKE_ZONE }}

      # - name: Setup gcloud CLI
      #   uses: google-github-actions/setup-gcloud@master
      #   with:
      #     version: '286.0.0'
      #     service_account_email: ${{ env.GCP_SA_EMAIL }}
      #     service_account_key: ${{ env.GCP_SA_KEY }}
      #     project_id: ${{ env.GCP_PROJECT_ID }}

      # - name: Docker authentication
      #   run: gcloud auth configure-docker

      # - name: Docker build
      #   run: docker build --build-arg NAME=$SERVICE_NAME -t gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA .
      
      # - name: Docker push
      #   run: |
      #     docker push gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA

  deploy:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      
      # - name: Clone gitops repository
      #   run: |
      #     ls ~/.ssh
      #     git clone https://github.com/5ylar/lab-golang-monorepo-github-actions-gitops

      - name: Set environment variables
        uses: allenevans/set-env@v2.0.0
        with:
          SERVICE_NAME: "user"
          DEPLOY_ENV: "development"

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.1.2
        with:
          url: https://vault.api-fillgoods.com
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            /poc/github-actions/${{ env.DEPLOY_ENV }} GCP_PROJECT_ID | GCP_PROJECT_ID;
            /poc/github-actions/${{ env.DEPLOY_ENV }} GITHUB_ACTION_TOKEN_GITOPS | GITHUB_ACTION_TOKEN_GITOPS;
  
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: master
          repository: 5ylar/lab-golang-monorepo-github-actions-gitops.git
          token: ${{ steps.secrets.outputs.GITHUB_ACTION_TOKEN_GITOPS }}

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.6.1"

      - name: Set deployment container image
        run: |
         cd $DEPLOY_ENV/$SERVICE_NAME
         kustomize edit set image $SERVICE_NAME=gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA
         cat kustomization.yaml

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update container image"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_ACTION_TOKEN_GITOPS }}

      # - name: Update deployment version
      #   run: ""
# env:
#   SERVICE_NAME:  ${{ secrets.SERVICE_NAME }}
#   GCP_SA_EMAIL:  ${{ secrets.GCP_SA_EMAIL }}
#   GCP_SA_KEY:  ${{ secrets.GCP_SA_KEY }}
#   GCP_PROJECT_ID:  ${{ secrets.GCP_PROJECT_ID }}
#   GKE_CLUSTER:  ${{ secrets.GKE_CLUSTER }}
#   GKE_ZONE:  ${{ secrets.GKE_ZONE }}



# jobs:
#   app:
#     strategy:
#       matrix:
#         # go-version: [1.16.x]
#         # os: [ubuntu-latest, macos-latest, windows-latest]
#         os: [ubuntu-latest]
#     runs-on: ${{ matrix.os }}
#     steps:

#     - name: Extract service name and deploy env
#       id: serviceNameAndDeployEnv
#       uses: actions/github-script@v3
#       with:
#         script: |
#           /* 
#             eg. 
#             - development => refs/heads/dev-service/user
#             - uat         => refs/heads/service/user
#             - production  => refs/tags/userv1.2.2
#           */

#           const { ref } = context.payload

#           const refWithoutPrefix = ref
#             .replace(/^refs\/tags\//,'')
#             .replace(/^refs\/heads\/service\//,'')
#             .replace(/^refs\/heads\/dev-service\//,'')

#           const serviceName = refWithoutPrefix.replace(/v[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}$/,'')

#           core.setOutput('exit', 'false')

#           switch(serviceName) {
#               case 'user':
#                 core.setOutput('serviceName', 'user')
#                 break
#               case 'foo':
#                 core.setOutput('serviceName', 'foo')
#                 break
#               default:
#                 core.setOutput('exit', 'true')
#                 return
#           }

#           if (/^\/refs\/tags\//g.test(ref)) {
#             core.setOutput('deployEnv', 'production')
#           } else  if (/^refs\/heads\/service\//g.test(ref)) {
#             core.setOutput('deployEnv', 'uat')
#           } else if (/^refs\/heads\/dev-service\//g.test(ref)) {
#             core.setOutput('deployEnv', 'development')
#           } else {
#             core.setOutput('exit', 'true')
#             return
#           }
#   
#     - name: Exit if not found service name or deployment environment
#       run: |
#         if [ ${{ steps.serviceNameAndDeployEnv.outputs.exit }} = 'true' ]
#         then
#           exit
#         fi

#     # - name: Install Go
#     #   uses: actions/setup-go@v2
    
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Setup gcloud CLI
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         version: '286.0.0'
#         service_account_email: ${{ env.GCP_SA_EMAIL }}
#         service_account_key: ${{ env.GCP_SA_KEY }}
#         project_id: ${{ env.GCP_PROJECT_ID }}

#     - name: Build and push
#       env:
#         SERVICE_NAME: ${{ steps.serviceNameAndDeployEnv.outputs.serviceName }}
#         DEPLOY_ENV: ${{ steps.serviceNameAndDeployEnv.outputs.deployEnv }}
#       run: |
#         gcloud auth configure-docker
#         docker build --build-arg NAME=$SERVICE_NAME -t gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA .
#         docker push gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA

#     - name: Set GKE credential
#       run: |
#         gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE --project $GCP_PROJECT_ID

#     - name: Deploy to GKE cluster
#       env:
#         SERVICE_NAME: ${{ steps.serviceNameAndDeployEnv.outputs.serviceName }}
#         DEPLOY_ENV: ${{ steps.serviceNameAndDeployEnv.outputs.deployEnv }}
#       run: |
#         kubectl cluster-info
#         kubectl set image deployment/$SERVICE_NAME-$DEPLOY_ENV user=gcr.io/$GCP_PROJECT_ID/$DEPLOY_ENV/$SERVICE_NAME:$GITHUB_SHA --record
#         kubectl rollout status deployment/$SERVICE_NAME-$DEPLOY_ENV --timeout=30s
