name: MonoRepo

on:
  push:
    branches:
      - main
      - service/user
      - dev-service/user
  pull_request:
    branches:
      - main
      - service/user
      - dev-service/user

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  SERVICE_NAME:  ${{ secrets.SERVICE_NAME }}

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.16.x]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Extract service name
      id: serviceName
      uses: actions/github-script@v3
      with:
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          /* 
            eg. 
            - development => refs/heads/dev-service/user
            - uat         => refs/heads/service/user
            - production  => refs/tags/userv1.2.2
          */

          const { ref } = context.payload

          const refWithoutPrefix = ref
            .replace(/^refs\/tags\//,'')
            .replace(/^refs\/heads\/service\//,'')
            .replace(/^refs\/heads\/dev-service\//,'')

          const serviceName = refWithoutPrefix.replace(/v[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}$/,'')

          switch(serviceName) {
              case 'user': return 'user'
              case 'foo': return 'foo'
              default:
                return ''
          }

    - name: Extract deploy env
      id: deployEnv
      uses: actions/github-script@v3
      with:
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { ref } = context.payload

          console.log("ref",ref)

          if (/^\/refs\/tags\//g.test(ref)) return 'production'
          if (/^refs\/heads\/service\//g.test(ref)) return 'uat'
          if (/^refs\/heads\/dev-service\//g.test(ref)) return 'development'

          return ''

    - name: Exit if not found service name or deployment environment
      # if: ${{ steps.deployEnv.outputs.result == '' || steps.serviceName.outputs.result == '' }}
      run: |
        if [ ${{ steps.deployEnv.outputs.result }} = '' ] || [ ${{ steps.serviceName.outputs.result }} = '' ]
        then
          exit_with_success
        fi

    - name: Install Go
      uses: actions/setup-go@v2
      # with:
      #   go-version: ${{ matrix.go-version }}
      #   os: ubuntu-latest
    
    - name: Checkout code
      uses: actions/checkout@v2

    - 
    
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '286.0.0'
        service_account_email: ${{ secrets.RUN_SA_EMAIL }}
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        # pull: true
        push: true
        build-args: |
          NAME=${{ steps.serviceName.outputs.result }}
        # cache-from: type=registry,ref=myorg/myrepository:latest
        # cache-to: type=inline
        tags: gcr.io/$PROJECT_ID/${{ steps.deployEnv.outputs.result }}/${{ steps.serviceName.outputs.result }}:$GITHUB_SHA
        # tags: myorg/myrepository:latest

    # # Build and push image to Google Container Registry
    # - name: Build
    #   run: |-
    #     gcloud builds submit \
    #       --quiet \
    #       --tag "gcr.io/$PROJECT_ID/${{ steps.deployEnv.outputs.result }}/${{ steps.serviceName.outputs.result }}:$GITHUB_SHA"
    #       --substitutions _NAME=${{ steps.serviceName.outputs.result }}

