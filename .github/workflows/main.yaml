on: [push, pull_request]
name: MonoRepo

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  SERVICE_NAME:  ${{ secrets.SERVICE_NAME }}

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.16.x]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Extract service name
      id: serviceName
      uses: actions/github-script@v3
      with:
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { ref } = context.payload

          const refWithoutPrefix = ref.replace(/^refs\/tags\//,'').replace(/^refs\/heads\/service\//,'')
          const serviceName = refWithoutPrefix.replace(/v[0-9]{1,2}.[0-9]{1,2}.[0-9]{1,2}$/,'')

          switch(tagNameWithoutVersion) {
              case 'service-user': return 'user'
              case 'service-foo': return 'foo'
              default:
                return null
          }

    - name: Extract deploy env
      id: deployEnv
      uses: actions/github-script@v3
      with:
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { ref } = context.payload

          if (/^\/refs\/tags\//g.test(ref)) return 'production'
          
          if (/^refs\/heads\/service\//g.test(ref)) return 'uat'

          if (/^refs\/heads\/dev-service\//g.test(ref)) return 'development'

    # - name: Extract tag name
    #   id: tag
    #   uses: actions/github-script@v3
    #   with:
    #     # github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       if (context.payload.ref.replace(/\/refs\/tags\//, '') == ) {

    #       }
    #       return context.payload.ref.replace(/\/refs\/tags\//, '');

    - name: Echo serviceName
      run: echo ${{ steps.serviceName.outputs.result }}

    - name: Echo deployEnv
      run: echo ${{ steps.deployEnv.outputs.result }}

    - name: Install Go
      uses: actions/setup-go@v2
      # with:
      #   go-version: ${{ matrix.go-version }}
      #   os: ubuntu-latest
    
    - name: Checkout code
      uses: actions/checkout@v2
    
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '286.0.0'
        service_account_email: ${{ secrets.RUN_SA_EMAIL }}
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}

    # Build and push image to Google Container Registry
    - name: Build
      run: |-
        gcloud builds submit \
          --quiet \
          --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"

